// Configura√ß√µes do Sistema de Economia - Arca Bot
export const EconomyConfig = {
    // === RECOMPENSAS POR CALL DE VOZ ===
    voiceRewards: {
        // Intervalo entre recompensas (em minutos)
        rewardIntervalMinutes: 5,
        // Valor m√≠nimo da recompensa por intervalo
        rewardMin: 50,
        // Valor m√°ximo da recompensa por intervalo
        rewardMax: 150,
        // Tempo m√≠nimo na call para come√ßar a receber recompensas (em minutos)
        minimumTimeForReward: 2,
        // ID da categoria do Discord onde as calls v√£o ter recompensas
        // Para pegar o ID: Clique com bot√£o direito na categoria > Copiar ID
        rewardCategoryId: "", // Substitua pelo ID da categoria desejada
        // Canais espec√≠ficos para recompensas (deixe vazio para usar toda a categoria)
        specificChannelIds: [] as string[],
    },

    // === RECOMPENSAS DI√ÅRIAS ===
    daily: {
        // Valor fixo da recompensa di√°ria
        baseAmount: 1000,
        // Valor aleat√≥rio adicional (min-max)
        bonusMin: 100,
        bonusMax: 600,
    },

    // === RECOMPENSAS POR MENSAGEM ===
    messages: {
        // N√∫mero de mensagens necess√°rias para ganhar recompensa
        messagesForReward: 10,
        // Valor m√≠nimo da recompensa por mensagem
        rewardMin: 25,
        // Valor m√°ximo da recompensa por mensagem
        rewardMax: 75,
        // Cooldown entre recompensas (em minutos)
        cooldownMinutes: 5,
        // Tamanho m√≠nimo da mensagem para contar (anti-spam)
        minMessageLength: 5,
    },

    // === RANKING ===
    ranking: {
        // N√∫mero m√°ximo de usu√°rios no ranking (0 = todos)
        maxUsers: 0,
        // Mostrar usu√°rios inativos no ranking
        showInactive: true,
    },

    // === TRANSFER√äNCIAS ===
    transfer: {
        // Valor m√≠nimo para transfer√™ncia
        minAmount: 1,
        // Taxa de transfer√™ncia (% do valor) - 0 = sem taxa
        transferFee: 0,
        // Limite m√°ximo de transfer√™ncia por transa√ß√£o (0 = sem limite)
        maxTransferAmount: 0,
    },

    // === COMANDOS ADMIN ===
    admin: {
        // Limite m√°ximo para comando /pagar (0 = sem limite)
        maxPayAmount: 0,
        // Limite m√°ximo para comando /remover (0 = sem limite)
        maxRemoveAmount: 0,
        // Valor m√≠nimo para distribui√ß√£o na call
        minDistributeAmount: 1,
        // IDs dos cargos que podem usar comandos de admin (vazio = usar permiss√µes do Discord)
        // Para pegar o ID do cargo: Clique com bot√£o direito no cargo > Copiar ID do Cargo
        adminRoleIds: [
            // "123456789012345678", // Exemplo: ID do cargo "Moderador"
            // "987654321098765432", // Exemplo: ID do cargo "Admin"
        ] as string[],
        // IDs dos usu√°rios que podem usar comandos de admin (al√©m dos cargos)
        // Para pegar o ID do usu√°rio: Clique com bot√£o direito no usu√°rio > Copiar ID do Usu√°rio
        adminUserIds: [
            // "306978576929128460", // Exemplo: ID do usu√°rio espec√≠fico
        ] as string[],
        // Se true, usa apenas os IDs configurados. Se false, tamb√©m aceita permiss√£o Administrator do Discord
        strictMode: false,
    },

    // === SISTEMA GERAL ===
    general: {
        // Nome da moeda
        currencyName: "Arca Coin",
        // S√≠mbolo da moeda
        currencySymbol: "AC",
        // Emoji da moeda
        currencyEmoji: "ü™ô",
        // Tempo de exibi√ß√£o das mensagens de recompensa (segundos)
        rewardMessageDuration: 10,
        // Formato de localiza√ß√£o para n√∫meros
        numberLocale: "pt-BR",
    },

    // === CORES DOS EMBEDS ===
    colors: {
        success: "#4CAF50",      // Verde
        error: "#FF6B6B",        // Vermelho
        warning: "#FF9800",      // Laranja
        info: "#2196F3",         // Azul
        economy: "#FFD700",      // Dourado
        neutral: "#9E9E9E",      // Cinza
    },

    // === MENSAGENS DO SISTEMA ===
    systemMessages: {
        // Mensagens de erro
        errors: {
            insufficientFunds: "Voc√™ n√£o tem Arca Coins suficientes!",
            invalidUser: "Usu√°rio inv√°lido ou n√£o encontrado!",
            cannotTransferToSelf: "Voc√™ n√£o pode transferir moedas para si mesmo!",
            cannotTransferToBots: "Voc√™ n√£o pode transferir moedas para bots!",
            alreadyClaimedDaily: "Voc√™ j√° coletou sua recompensa di√°ria hoje!",
            notInVoiceChannel: "Voc√™ precisa estar em um canal de voz para distribuir moedas!",
            noUsersInVoice: "N√£o h√° usu√°rios (n√£o-bots) no canal de voz!",
        },
        
        // Mensagens de sucesso
        success: {
            dailyClaimed: "Parab√©ns! Voc√™ coletou sua recompensa di√°ria!",
            transferComplete: "Transfer√™ncia realizada com sucesso!",
            paymentComplete: "Pagamento realizado com sucesso!",
            removalComplete: "Remo√ß√£o realizada com sucesso!",
            distributionComplete: "Distribui√ß√£o realizada com sucesso!",
            messageReward: "Voc√™ ganhou uma recompensa por ser ativo no chat!",
        },
    },
};

// Fun√ß√£o helper para calcular recompensa por call de voz
export function calculateVoiceReward(): number {
    const { rewardMin, rewardMax } = EconomyConfig.voiceRewards;
    return Math.floor(Math.random() * (rewardMax - rewardMin + 1)) + rewardMin;
}

// Fun√ß√£o helper para validar se um canal deve ter recompensas de voz
export function shouldChannelHaveVoiceRewards(channelId: string, categoryId: string | null): boolean {
    const { rewardCategoryId, specificChannelIds } = EconomyConfig.voiceRewards;
    
    // Se h√° canais espec√≠ficos configurados, verificar se est√° na lista
    if (specificChannelIds.length > 0) {
        return specificChannelIds.includes(channelId);
    }
    
    // Sen√£o, verificar se est√° na categoria configurada
    if (rewardCategoryId && categoryId) {
        return categoryId === rewardCategoryId;
    }
    
    return false;
}

// Fun√ß√£o helper para calcular recompensa di√°ria
export function calculateDailyReward(): number {
    const { baseAmount, bonusMin, bonusMax } = EconomyConfig.daily;
    const bonus = Math.floor(Math.random() * (bonusMax - bonusMin + 1)) + bonusMin;
    return baseAmount + bonus;
}

// Fun√ß√£o helper para calcular recompensa por mensagem
export function calculateMessageReward(): number {
    const { rewardMin, rewardMax } = EconomyConfig.messages;
    return Math.floor(Math.random() * (rewardMax - rewardMin + 1)) + rewardMin;
}

// Fun√ß√£o helper para formatar moeda
export function formatCurrency(amount: number): string {
    const { numberLocale, currencySymbol } = EconomyConfig.general;
    return `${amount.toLocaleString(numberLocale)} ${currencySymbol}`;
}

// Fun√ß√£o helper para validar valor de transfer√™ncia
export function validateTransferAmount(amount: number, userBalance: number): { valid: boolean; message?: string } {
    const { minAmount, maxTransferAmount } = EconomyConfig.transfer;
    
    if (amount < minAmount) {
        return { valid: false, message: `Valor m√≠nimo para transfer√™ncia: ${formatCurrency(minAmount)}` };
    }
    
    if (maxTransferAmount > 0 && amount > maxTransferAmount) {
        return { valid: false, message: `Valor m√°ximo para transfer√™ncia: ${formatCurrency(maxTransferAmount)}` };
    }
    
    if (amount > userBalance) {
        return { valid: false, message: EconomyConfig.systemMessages.errors.insufficientFunds };
    }
    
    return { valid: true };
}

// Fun√ß√£o helper para verificar se um usu√°rio √© admin
export function isUserAdmin(userId: string, userRoles: string[], hasAdminPermission: boolean): boolean {
    const { adminRoleIds, adminUserIds, strictMode } = EconomyConfig.admin;
    
    // Verificar se o usu√°rio est√° na lista de admins
    if (adminUserIds.includes(userId)) {
        return true;
    }
    
    // Verificar se o usu√°rio tem algum cargo de admin
    if (adminRoleIds.length > 0) {
        const hasAdminRole = userRoles.some(roleId => adminRoleIds.includes(roleId));
        if (hasAdminRole) {
            return true;
        }
    }
    
    // Se n√£o est√° em modo estrito, tamb√©m aceita permiss√£o Administrator do Discord
    if (!strictMode && hasAdminPermission) {
        return true;
    }
    
    return false;
}
