import { Client } from "discord.js";
import { logger } from "./logger.js";
import { voiceTrackingStore } from "#database";
import { backupSystem } from "./backupSystem.js";

// Vari√°veis globais para controle
let isShuttingDown = false;
let shutdownTimeoutId: NodeJS.Timeout | null = null;
const shutdownTimeout = 10000; // 10 segundos timeout

export async function gracefulShutdown(client: Client | null, signal: string = "UNKNOWN"): Promise<void> {
    if (isShuttingDown) {
        logger.warn("‚ö†Ô∏è Shutdown j√° em andamento...");
        return;
    }

    isShuttingDown = true;
    logger.log(`üîÑ Iniciando shutdown graceful... (Signal: ${signal})`);

    // Timeout de seguran√ßa
    shutdownTimeoutId = setTimeout(() => {
        logger.error("‚ùå Timeout no shutdown graceful - for√ßando sa√≠da");
        process.exit(1);
    }, shutdownTimeout);

    try {
        // 1. Parar de aceitar novos eventos
        if (client && client.isReady()) {
            logger.log("üîÑ Pausando processamento de novos eventos...");
            client.removeAllListeners();
        }

        // 2. Criar backup antes de finalizar
        await createBackupBeforeShutdown(signal);

        // 3. Finalizar todas as sess√µes de voice tracking ativas
        await finalizeActiveSessions();

        // 4. Salvar dados pendentes
        await saveAllPendingData();

        // 4. Desconectar do Discord
        if (client && client.isReady()) {
            logger.log("üîÑ Desconectando do Discord...");
            await client.destroy();
            logger.success("‚úÖ Desconectado do Discord");
        }

        // 5. Limpar timeouts
        clearAllTimeouts();

        // 6. Limpar timeout de seguran√ßa
        if (shutdownTimeoutId) {
            clearTimeout(shutdownTimeoutId);
            shutdownTimeoutId = null;
        }

        logger.success("‚úÖ Shutdown graceful conclu√≠do com sucesso");
        process.exit(0);

    } catch (error) {
        logger.error("‚ùå Erro durante shutdown graceful:", error);
        
        if (shutdownTimeoutId) {
            clearTimeout(shutdownTimeoutId);
        }
        
        process.exit(1);
    }
}

async function createBackupBeforeShutdown(signal: string): Promise<void> {
    try {
        logger.log("üîÑ Criando backup antes do shutdown...");
        
        const description = `Backup autom√°tico antes do shutdown (${signal})`;
        await backupSystem.createFullBackup(description);
        
        logger.success("‚úÖ Backup criado antes do shutdown");
    } catch (error) {
        logger.error("‚ùå Erro ao criar backup antes do shutdown:", error);
        // N√£o interromper o shutdown por causa do backup
    }
}

async function finalizeActiveSessions(): Promise<void> {
    try {
        logger.log("üîÑ Finalizando sess√µes de voice tracking ativas...");
        
        const activeSessions = voiceTrackingStore.getAllActiveSessions();
        let finalizedCount = 0;

        for (const session of activeSessions) {
            try {
                voiceTrackingStore.endSession(session.userId);
                finalizedCount++;
            } catch (error) {
                logger.error(`‚ùå Erro ao finalizar sess√£o do usu√°rio ${session.userId}:`, error);
            }
        }

        logger.success(`‚úÖ ${finalizedCount} sess√µes finalizadas`);
    } catch (error) {
        logger.error("‚ùå Erro ao finalizar sess√µes:", error);
    }
}

async function saveAllPendingData(): Promise<void> {
    try {
        logger.log("üîÑ Salvando dados pendentes...");
        
        // For√ßa uma limpeza final dos dados
        voiceTrackingStore.cleanup();
        
        logger.success("‚úÖ Dados salvos com sucesso");
    } catch (error) {
        logger.error("‚ùå Erro ao salvar dados:", error);
    }
}

function clearAllTimeouts(): void {
    try {
        logger.log("üîÑ Limpando timeouts e intervalos...");
        
        // Limpar intervalos de limpeza peri√≥dica
        // (Os intervalos espec√≠ficos de recompensas s√£o limpos quando as sess√µes s√£o finalizadas)
        
        logger.success("‚úÖ Timeouts limpos");
    } catch (error) {
        logger.error("‚ùå Erro ao limpar timeouts:", error);
    }
}

// Fun√ß√£o para registrar handlers de shutdown
export function registerShutdownHandlers(client: Client): void {
    // Ctrl+C
    process.on('SIGINT', () => {
        logger.log("üìù Recebido SIGINT (Ctrl+C)");
        gracefulShutdown(client, 'SIGINT');
    });

    // Terminal kill
    process.on('SIGTERM', () => {
        logger.log("üìù Recebido SIGTERM");
        gracefulShutdown(client, 'SIGTERM');
    });

    // Windows Ctrl+Break
    process.on('SIGBREAK', () => {
        logger.log("üìù Recebido SIGBREAK");
        gracefulShutdown(client, 'SIGBREAK');
    });

    // Erro n√£o capturado
    process.on('uncaughtException', (error) => {
        logger.error("‚ùå Erro n√£o capturado:", error);
        gracefulShutdown(client, 'UNCAUGHT_EXCEPTION');
    });

    // Promise rejeitada n√£o tratada
    process.on('unhandledRejection', (reason) => {
        logger.error("‚ùå Promise rejeitada n√£o tratada:", reason);
        gracefulShutdown(client, 'UNHANDLED_REJECTION');
    });

    // Aviso quando o processo est√° saindo
    process.on('exit', (code) => {
        logger.log(`üîÑ Processo saindo com c√≥digo: ${code}`);
    });

    logger.success("‚úÖ Handlers de shutdown registrados");
}

// Fun√ß√£o para comando administrativo de shutdown
export async function adminShutdown(client: Client, reason: string = "Comando administrativo"): Promise<void> {
    logger.log(`üìù Shutdown solicitado: ${reason}`);
    await gracefulShutdown(client, 'ADMIN_COMMAND');
}
