import { createCommand } from "#base";
import { ApplicationCommandOptionType, EmbedBuilder } from "discord.js";
import { voiceTrackingStore } from "#database";
import { VoiceConfig } from "../../../settings/voiceConfig.js";
import { isUserAdmin, EconomyConfig } from "../../../settings/economyConfig.js";

createCommand({
    name: "voice-status",
    description: "Mostra o status atual do sistema de voice tracking",
    defaultMemberPermissions: ["Administrator"],
    options: [
        {
            name: "acao",
            description: "A√ß√£o a ser executada",
            type: ApplicationCommandOptionType.String,
            required: false,
            choices: [
                { name: "Status Geral", value: "status" },
                { name: "Sess√µes Ativas", value: "active" },
                { name: "Usu√°rios Ausentes", value: "absent" },
                { name: "Limpeza", value: "cleanup" }
            ]
        }
    ],
    async run(interaction) {
        // Verificar se o usu√°rio √© administrador
        const member = interaction.member;
        if (!member) {
            await interaction.reply({
                content: "‚ùå Erro: N√£o foi poss√≠vel identificar o usu√°rio.",
                ephemeral: true
            });
            return;
        }

        const userRoles = member.roles instanceof Array ? member.roles : Array.from(member.roles.cache.keys());
        const hasAdminPermission = member.permissions.has("Administrator");
        
        if (!isUserAdmin(interaction.user.id, userRoles, hasAdminPermission)) {
            await interaction.reply({
                content: "‚ùå Voc√™ n√£o tem permiss√£o para usar este comando. Apenas administradores podem acessar o status do voice tracking.",
                ephemeral: true
            });
            return;
        }

        const acao = interaction.options.getString("acao") || "status";

        try {
            switch (acao) {
                case "status":
                    await showGeneralStatus(interaction);
                    break;
                case "active":
                    await showActiveSessions(interaction);
                    break;  
                case "cleanup":
                    await performCleanup(interaction);
                    break;
                default:
                    await interaction.reply({
                        content: "‚ö†Ô∏è Op√ß√£o n√£o dispon√≠vel. O sistema de aus√™ncia foi removido.",
                        ephemeral: true
                    });
                    break;
            }
        } catch (error) {
            console.error("Erro no comando voice-status:", error);
            await interaction.reply({
                content: "‚ùå Erro ao executar comando de voice status.",
                ephemeral: true
            });
        }
    }
});

async function showGeneralStatus(interaction: any): Promise<void> {
    const activeSessions = voiceTrackingStore.getAllActiveSessions();
    const absentUsers = voiceTrackingStore.getAllAbsentUsers();
    const channelStatuses = voiceTrackingStore.getAllChannelStatuses();

    const embed = new EmbedBuilder()
        .setTitle("üé§ Status do Sistema de Voice Tracking")
        .setDescription("**Vis√£o geral do sistema ARCA Voice Tracking**")
        .setColor(parseInt(EconomyConfig.colors.info.replace('#', ''), 16))
        .setTimestamp()
        .addFields(
            {
                name: "üìä Estat√≠sticas Gerais",
                value: [
                    `üü¢ **Sess√µes Ativas:** ${activeSessions.length}`,
                    `‚è∏Ô∏è **Usu√°rios Ausentes:** ${absentUsers.length}`,
                    `üì∫ **Canais com Status:** ${channelStatuses.length}`,
                    `‚öôÔ∏è **Sistema:** ${VoiceConfig.enabled ? "Ativo" : "Inativo"}`
                ].join("\n"),
                inline: false
            },
            {
                name: "üéØ Configura√ß√µes",
                value: [
                    `üí∞ **AC por Hora:** ${VoiceConfig.rewards.acPerHour}`,
                    `‚è±Ô∏è **Tempo M√≠n. Recompensa:** ${VoiceConfig.rewards.minTimeForReward} min`,
                    `üìÇ **Categoria:** ${VoiceConfig.voiceChannelsCategory}`
                ].join("\n"),
                inline: false
            }
        )
        .setFooter({ text: "ARCA Bot - Voice Tracking System" });

    if (activeSessions.length > 0) {
        const topSessions = activeSessions
            .sort((a, b) => {
                const durationA = voiceTrackingStore.getSessionDuration(a.userId);
                const durationB = voiceTrackingStore.getSessionDuration(b.userId);
                return durationB - durationA;
            })
            .slice(0, 5);

        const sessionList = topSessions.map(session => {
            const duration = voiceTrackingStore.getSessionDuration(session.userId);
            const timeStr = VoiceConfig.helpers.formatDuration(duration);
            return `‚Ä¢ <@${session.userId}> - ${session.channelName} (${timeStr})`;
        }).join("\n");

        embed.addFields({
            name: "üé§ Top 5 Sess√µes Ativas",
            value: sessionList,
            inline: false
        });
    }

    await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function showActiveSessions(interaction: any): Promise<void> {
    const activeSessions = voiceTrackingStore.getAllActiveSessions();

    const embed = new EmbedBuilder()
        .setTitle("üé§ Sess√µes Ativas")
        .setColor(parseInt(EconomyConfig.colors.success.replace('#', ''), 16))
        .setTimestamp();

    if (activeSessions.length === 0) {
        embed.setDescription("Nenhuma sess√£o ativa no momento.");
        await interaction.reply({ embeds: [embed], ephemeral: true });
        return;
    }

    const sessionGroups: Record<string, any[]> = {};
    activeSessions.forEach(session => {
        if (!sessionGroups[session.channelName]) {
            sessionGroups[session.channelName] = [];
        }
        sessionGroups[session.channelName].push(session);
    });

    for (const [channelName, sessions] of Object.entries(sessionGroups)) {
        const sessionList = sessions.map(session => {
            const duration = voiceTrackingStore.getSessionDuration(session.userId);
            const timeStr = VoiceConfig.helpers.formatDuration(duration);
            return `‚Ä¢ <@${session.userId}> - ${timeStr} (${session.acEarned} AC)`;
        }).join("\n");

        embed.addFields({
            name: `üîä ${channelName} (${sessions.length} usu√°rios)`,
            value: sessionList,
            inline: false
        });
    }

    embed.setDescription(`**${activeSessions.length} sess√µes ativas encontradas**`);
    await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function performCleanup(interaction: any): Promise<void> {
    try {
        voiceTrackingStore.cleanup();

        const embed = new EmbedBuilder()
            .setTitle("üßπ Limpeza Executada")
            .setDescription("Limpeza do sistema de voice tracking executada com sucesso!")
            .setColor(parseInt(EconomyConfig.colors.success.replace('#', ''), 16))
            .setTimestamp()
            .addFields({
                name: "üìã A√ß√µes Executadas",
                value: [
                    "‚Ä¢ Sess√µes antigas removidas",
                    "‚Ä¢ Aus√™ncias expiradas limpas",
                    "‚Ä¢ Status de canais validado",
                    "‚Ä¢ Dados salvos"
                ].join("\n"),
                inline: false
            })
            .setFooter({ text: "ARCA Bot - Sistema de Limpeza" });

        await interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (error) {
        console.error("Erro na limpeza:", error);
        await interaction.reply({
            content: "‚ùå Erro ao executar limpeza do sistema.",
            ephemeral: true
        });
    }
}
