# Dockerfile para produção
FROM node:20-alpine AS builder

WORKDIR /app

# Instalar dependências de build
RUN apk add --no-cache git python3 make g++

# Copiar arquivos de dependências
COPY package*.json ./
RUN npm ci

# Copiar código e compilar
COPY . .
RUN npm run build

# Imagem final
FROM node:20-alpine

WORKDIR /app

# Instalar curl para health checks
RUN apk add --no-cache curl

# Copiar dependências de produção
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copiar build da imagem anterior
COPY --from=builder /app/build ./build

# Copiar arquivos necessários
COPY docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Script de health check
RUN echo '#!/bin/sh\n\
if pgrep -f "node.*build/index.js" > /dev/null; then\n\
  exit 0\n\
else\n\
  exit 1\n\
fi' > /app/healthcheck.sh && chmod +x /app/healthcheck.sh

# Configurar health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD /app/healthcheck.sh

# Criar diretórios e configurar permissões
RUN mkdir -p data logs && \
    chown -R node:node /app

# Usar usuário não-root
USER node

# Comando de inicialização
ENTRYPOINT ["/app/docker-entrypoint.sh"]
